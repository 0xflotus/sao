#!/usr/bin/env node
'use strict'
const cac = require('cac')
const ora = require('ora')
const chalk = require('chalk')
const table = require('text-table')
const log = require('../lib/log')
const configUtils = require('../lib/config-utils')
const utils = require('../lib/utils')

const cli = cac()

const defaultCommand = cli.command('*', 'Generate a new project', (input, flags) => {
  const template = input[0]

  // initialize config folder
  configUtils.ensureConfigDir()

  if (flags.templates) {
    const templates = utils.getTemplates()

    console.log(chalk.cyan(`\n  Templates installed from npm:\n`))

    if (templates.packages.length === 0) {
      console.log('  none')
    } else {
      console.log(table(templates.packages.map(item => {
        const pkg = utils.readGlobalPackage(item)
        return [
          `  ${item.replace(/-([\s\S]+)/, (m, p1) => `-${chalk.bold(p1)}`)}`,
          chalk.dim(`v${pkg.version}`)
        ]
      })))
    }

    console.log(chalk.cyan(`\n  Templates installed from git:\n`))

    if (templates.repos.length === 0) {
      console.log('  none')
    } else {
      for (const item of templates.repos) {
        console.log(`  ${item.replace(/-([\s\S]+)/, (m, p1) => `/${chalk.bold(p1)}`)}`)
      }
    }

    console.log()

    return
  }

  if (!template) {
    return cli.showHelp()
  }

  const sao = require('../lib')
  const event = require('../lib/event')

  const spinner = ora()
  event.on('download:start', () => {
    spinner.text = 'Downloading...'
    spinner.start()
  })
  event.on('download:stop', () => {
    spinner.stop()
  })
  event.on('install-template:start', (packageName, pm) => {
    console.log(chalk.yellow(`> Installing ${packageName} with ${pm}...`))
  })

  const options = Object.assign({
    template,
    targetPath: input[1]
  }, flags)

  return sao(options)
    .catch(err => {
      spinner.stop()
      if (err.name === 'SAOError') {
        log.error(err.message)
      } else if (err.name === 'HTTPError') {
        log.error(`${err.statusMessage}: ${err.host}${err.path}`)
      } else {
        log.error(err.stack)
      }
      process.exit(1)
    })
})

defaultCommand
  .option('config', 'Use custom config file')
  .option('install', {
    desc: 'Always install template before generating',
    type: 'boolean'
  })
  .option('remove-store', {
    desc: 'Remove stored prompt answers',
    type: 'boolean'
  })
  .option('skip-store', {
    desc: 'Skip stored prompt answers, i.e. do not use them',
    type: 'boolean'
  })
  .option('templates', {
    desc: 'Show installed templates',
    type: 'boolean'
  })
  .option('force-npm', {
    desc: 'Always use npm^5 instead of yarn to install templates and dependencies',
    type: 'boolean'
  })

cli.parse()
